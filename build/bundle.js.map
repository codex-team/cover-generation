{"version":3,"sources":["webpack:///webpack/bootstrap 0e755d16f0e624a8bb63","webpack:///./src/dom.js","webpack:///./src/main.js","webpack:///./src/styles/main.css","webpack:///./src/ui.js","webpack:///./src/canvas.js","webpack:///./src/toolbar.js"],"names":["Dom","tagName","classNames","attributes","el","document","createElement","Array","isArray","classList","add","attrName","tag","param","n","createElementNS","p","setAttributeNS","module","exports","require","ui","Canvas","default","Toolbar","init","initParams","console","assert","containerId","container","getElementById","warn","canvasInstance","toolbarInstance","nodes","create","destroy","$","CSS","editor","controls","resizeButton","resizeButtonActive","resizeButtonSquare","resizeButtonVertical","resizeButtonHorisontal","controlButton","headlineControl","mainTextControl","imageControl","controlButtonSave","canvasWrapper","canvas","canvasActive","instances","toolbar","mainTextElement","headlineElement","pictureElement","currentText","mainRectangle","resizeSqure","resizeVertical","resizeHorisontal","saveButton","pictureButton","mainTextButton","headlineButton","currentCanvasEditing","canvasClicked","event","target","contains","hide","remove","saveButtonClicked","export","resizeButtonClicked","button","size","dataset","forEach","header","setCanvasFormat","controlButtonsClicked","object","elementType","addEventListener","elementClickedHandler","showToolbar","element","openNear","bindEvents","body","make","textContent","buttonName","appendChild","tree","svg","elements","headline","image","mainText","alignment","left","center","right","newText","formats","vertical","horisontal","square","sizes","width","height","top","bottom","alignmentPadding","paddingOfElement","paddingOfCanvas","colors","mainSVGcolor","indexOf","type","children","length","format","setSize","style","color","fontSize","align","key","text","innerHTML","setAttribute","pasteFromClipboard","bind","setElementAlignment","stopPropagation","preventDefault","data","clipboardData","window","getData","insertAtCaret","execCommand","link","src","createText","createImage","serializer","XMLSerializer","source","serializeToString","match","replace","encodeURIComponent","click","removeChild","fontSizes","properties","small","medium","big","undefined","buttons","colorForm","hidden","colorMode","normal","active","defaultText","margin","action","buttonClicked","changeColorModeByKey","insertBefore","changeFontSize","changeAlignment","changeColorMode","current","next","setTextFontSize","moveToTarget","setTextColor","background","keyCode","changeColor","value","focus","parent","offsetParent","coords","offsetTop","offsetLeft","getCoords","parentNode","clientWidth","clientHeight","removeTargetParams","getTargetParams"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0e755d16f0e624a8bb63","/**\n * DOM elements manipulations\n */\nexport default class Dom {\n\n    /**\n    * Helper for making Elements with classname and attributes\n    * @param  {string} tagName           - new Element tag name\n    * @param  {array|string} classNames  - list or name of CSS classname(s)\n    * @param  {Object} attributes        - any attributes\n    * @return {Element}\n    */\n    static make(tagName, classNames, attributes) {\n\n        var el = document.createElement(tagName);\n\n        if ( Array.isArray(classNames) ) {\n\n            el.classList.add(...classNames);\n\n        } else if( classNames ) {\n\n            el.classList.add(classNames);\n\n        }\n\n        for (let attrName in attributes) {\n\n            el[attrName] = attributes[attrName];\n\n        }\n        return el;\n\n    }\n\n\n    /**\n    * Creates SVG element\n    *\n    * @param {string} tag - element tag name\n    * @param {object} param - parametrs\n    *\n    * @returns {Element} new created svg tag\n    */\n    static svg(tag, param) {\n\n        var n = document.createElementNS('http://www.w3.org/2000/svg', tag);\n\n        for (var p in param) {\n\n            n.setAttributeNS(null, p, param[p]);\n\n        }\n\n        return n;\n\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/dom.js","/**\n * Cover module entry poit\n */\nmodule.exports = function () {\n\n    'use strict';\n\n    /**\n     * Requre CSS\n     */\n    require('./styles/main.css');\n\n    /**\n     * User Interface module\n     */\n    let ui = require('./ui');\n\n    /**\n     * Canvas module\n     * @type {Canvas}\n     */\n    let Canvas = require('./canvas').default,\n        Toolbar = require('./toolbar').default;\n\n    /**\n     * Initialization method\n     * @param  {object} initParams\n     * @param  {string} initParams.containerId - in that Node we will render Editor\n     */\n    let init = function (initParams = {}) {\n\n        console.assert(initParams.containerId, 'Container id is missed');\n\n        let container = document.getElementById(initParams.containerId);\n\n        if (!container) {\n\n            console.warn('Container was not found by id %o', initParams.containerId);\n            return;\n\n        }\n\n        let canvasInstance = new Canvas(),\n            toolbarInstance = new Toolbar();\n\n        /**\n         * Make interface and bind events\n         */\n        let nodes = ui.create(container, canvasInstance, toolbarInstance);\n\n    };\n\n    /**\n     * Destories UI\n     */\n    let destroy = function () {\n\n    };\n\n    return {\n        init,\n        destroy\n    };\n\n}();\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/styles/main.css\n// module id = 2\n// module chunks = 0","/**\n * User interface module\n */\nmodule.exports = function () {\n\n    'use strict';\n\n    let $ = require('./dom').default;\n\n    /**\n     * Style classnames\n     *\n     * @type {Object}\n     */\n    const CSS = {\n        editor                 : 'cover-editor',\n        controls               : 'cover-editor__controls',\n\n        resizeButton           : 'cover-editor__resize-canvas',\n        resizeButtonActive     : 'cover-editor__resize-canvas--active',\n\n        resizeButtonSquare     : 'cover-editor__resize-canvas--square',\n        resizeButtonVertical   : 'cover-editor__resize-canvas--vertical',\n        resizeButtonHorisontal : 'cover-editor__resize-canvas--horisontal',\n\n        controlButton          : 'cover-editor__control-button',\n        headlineControl        : 'cover-editor__control-button--headline',\n        mainTextControl        : 'cover-editor__control-button--main-text',\n        imageControl           : 'cover-editor__control-button--image',\n        controlButtonSave      : 'cover-editor__control-button--save',\n\n        canvasWrapper          : 'cover-editor__canvas-wrapper',\n        canvas                 : 'cover-editor__canvas',\n        canvasActive           : 'cover-editor__canvas-wrapper--active',\n    };\n\n    /**\n     * Static instances\n     *\n     * @type {Object}\n     */\n    let instances = {\n        canvas               : null,\n        toolbar              : null\n    };\n\n    /**\n     * Static nodes cache\n     *\n     * @type {Object}\n     */\n    let nodes = {\n        mainTextElement      : null,\n        headlineElement      : null,\n        pictureElement       : null,\n        currentText          : null,\n        canvasWrapper        : null,\n        canvas               : null,\n        mainRectangle        : null,\n        controls : {\n            resizeSqure      : null,\n            resizeVertical   : null,\n            resizeHorisontal : null,\n            saveButton       : null,\n            pictureButton    : null,\n            mainTextButton   : null,\n            headlineButton   : null,\n        },\n        currentCanvasEditing : null\n    };\n\n    /**\n     * Make canvas active\n     *\n     * @param {event} - click\n     */\n    function canvasClicked(event) {\n\n        if (event.target.classList.contains(CSS.canvasWrapper) ||\n            event.target.tagName == 'rect') {\n\n            instances.toolbar.hide();\n            nodes.canvasWrapper.classList.add(CSS.canvasActive);\n\n        } else {\n\n            nodes.canvasWrapper.classList.remove(CSS.canvasActive);\n\n        }\n\n    }\n\n    /**\n     * Save button click listener\n     */\n    function saveButtonClicked() {\n\n        instances.canvas.export();\n\n    }\n\n    /**\n     * Resize button click listener\n     *\n     * @param {MouseEvent} event — click\n     */\n    function resizeButtonClicked(event) {\n\n        let button = event.target,\n            size = button.dataset.size;\n\n        ['resizeSqure', 'resizeVertical', 'resizeHorisontal'].forEach( header => {\n\n            nodes.controls[header].classList.remove(CSS.resizeButtonActive);\n\n        });\n\n        event.target.classList.add(CSS.resizeButtonActive);\n        instances.toolbar.hide();\n        instances.canvas.setCanvasFormat(size);\n\n    }\n\n    /**\n     * Control buttons click listener\n     *\n     * @param  {MouseEvent} event  - click\n     */\n    function controlButtonsClicked(event) {\n\n        let button = event.target,\n            object = button.dataset.object;\n\n        createElement(object);\n\n    }\n\n    /**\n     * Create element and add to canvas\n     *\n     * @param {String} elementType - type of element\n     */\n    function createElement(elementType) {\n\n        /**\n         * Check if elementType has already created\n         */\n        if (nodes[elementType]) {\n\n            return;\n\n        }\n\n        nodes[elementType] = instances.canvas.createElement(elementType);\n        nodes[elementType].addEventListener('click', elementClickedHandler);\n        showToolbar(nodes[elementType]);\n\n    }\n\n    /**\n     * Show toolbar\n     *\n     * @param {Element} element - element at the canvas\n     */\n    function showToolbar(element) {\n\n        instances.toolbar.openNear(element);\n\n    }\n\n    /**\n     * Handle click on canvas elements to show toolbar near clicked one\n     */\n    function elementClickedHandler() {\n\n        showToolbar(this);\n\n    }\n\n    /**\n     * Bind necessary event to manupulate controls\n     */\n    function bindEvents() {\n\n        document.body.addEventListener('click', canvasClicked);\n\n        nodes.controls.saveButton.addEventListener('click', saveButtonClicked);\n\n        nodes.controls.resizeSqure.addEventListener('click', resizeButtonClicked);\n        nodes.controls.resizeVertical.addEventListener('click', resizeButtonClicked);\n        nodes.controls.resizeHorisontal.addEventListener('click', resizeButtonClicked);\n\n        nodes.controls.pictureButton.addEventListener('click', controlButtonsClicked);\n        nodes.controls.mainTextButton.addEventListener('click', controlButtonsClicked);\n        nodes.controls.headlineButton.addEventListener('click', controlButtonsClicked);\n\n    }\n\n    /**\n     * Create cover-editor\n     * @param {object} settings - array of paramertres\n     * @param {Element} settings.container - element to create cover-editor\n     */\n    function create(container, canvasInstance, toolbarInstance) {\n\n        var editor   = $.make('div', CSS.editor),\n            controls = $.make('div', CSS.controls);\n\n\n        instances.canvas                = canvasInstance;\n        instances.toolbar               = toolbarInstance;\n\n        nodes.canvasWrapper             = $.make('div', CSS.canvasWrapper);\n        nodes.canvas                    = instances.canvas.create(nodes.canvasWrapper);\n        nodes.controls.resizeSqure      = $.make('span', [CSS.resizeButton, CSS.resizeButtonSquare]);\n        nodes.controls.resizeVertical   = $.make('span', [CSS.resizeButton, CSS.resizeButtonVertical]);\n        nodes.controls.resizeHorisontal = $.make('span', [CSS.resizeButton, CSS.resizeButtonHorisontal]);\n        nodes.controls.saveButton       = $.make('span', [CSS.controlButton, CSS.controlButtonSave]);\n        nodes.controls.pictureButton    = $.make('span', [CSS.controlButton, CSS.imageControl], { textContent: 'Image' });\n        nodes.controls.mainTextButton   = $.make('span', [CSS.controlButton, CSS.mainTextControl], { textContent: 'Main Text' });\n        nodes.controls.headlineButton   = $.make('span', [CSS.controlButton, CSS.headlineControl], { textContent: 'Headline' });\n\n        /**\n         * Save size in button's data-size\n         */\n        nodes.controls.resizeSqure.dataset.size = 'square';\n        nodes.controls.resizeVertical.dataset.size = 'vertical';\n        nodes.controls.resizeHorisontal.dataset.size = 'horisontal';\n        nodes.controls.resizeHorisontal.classList.add(CSS.resizeButtonActive);\n\n        /**\n         * Save create element type in button's data-object\n         */\n        nodes.controls.mainTextButton.dataset.object = 'mainText';\n        nodes.controls.headlineButton.dataset.object = 'headline';\n        nodes.controls.pictureButton.dataset.object = 'picture';\n\n        for (let buttonName in nodes.controls) {\n\n            controls.appendChild(nodes.controls[buttonName]);\n\n        }\n\n        editor.appendChild(controls);\n        nodes.canvasWrapper.appendChild(nodes.canvas);\n        editor.appendChild(nodes.canvasWrapper);\n\n        container.appendChild(editor);\n\n        instances.toolbar.create(editor, nodes.canvas, instances.canvas);\n\n        bindEvents();\n\n        return nodes;\n\n    }\n\n\n    return {\n        create\n    };\n\n}();\n\n\n\n// WEBPACK FOOTER //\n// ./src/ui.js","/**\n * DOM utility\n */\nlet $ = require('./dom').default;\n\n/**\n * Canvas module\n *\n * @property {Object} tree               - object with links to DOM-Elements of Canvas\n * @property {Object} CSS                - object with CSS-styles of the Canvas\n * @property {String} newText            - string with text showing in main text and headline by default\n * @property {Object} formats            - types of sizes of the canvas block\n * @property {Object} sizes              - sizes of canvas block\n * @property {Object} alignment          - types of alignment\n * @property {Object} elements           - types of elements on canvas\n * @property {Number} paddingOfElement   - space field around the text element\n * @property {Number} paddingOfCanvas    - padding between elements and the canvas\n * @property {Number} imageSize          - size of image in px\n * @property {Object} colors             - default colors\n */\nexport default class Canvas {\n\n    /**\n     * Initialization of canvas module\n     */\n    constructor() {\n\n        /**\n         * DOM of this class\n         */\n        this.tree = {\n            svg: null\n        };\n\n        this.CSS = {\n            canvas: 'cover-editor__canvas',\n            element: 'cover-editor__element',\n            elements: {\n                headline: 'cover-editor__headline',\n                image: 'cover-editor__image',\n                mainText: 'cover-editor__mainText'\n            },\n            alignment: {\n                left: 'cover-editor__element--left',\n                center: 'cover-editor__element--center',\n                right: 'cover-editor__element--right',\n            }\n        };\n\n        /**\n         * Const with value: 'New Text'\n         */\n        this.newText = 'New Text';\n\n        /**\n         * Size formats of canvas\n         */\n        this.formats = {\n            vertical: 'vertical',\n            horisontal: 'horisontal',\n            square: 'square'\n        };\n\n        /**\n         * Sizes of canvas\n         */\n        this.sizes = {\n            vertical: {width: 510, height: 560},\n            horisontal: {width: 650, height: 370},\n            square: {width: 510, height: 510}\n        };\n\n        /**\n         * Alignment elements at canvas\n         */\n        this.alignment = {\n            horisontal: {\n                left: 'left',\n                right: 'right',\n                center: 'center'\n            },\n            vertical: {\n                top: 'top',\n                center: 'center',\n                bottom: 'bottom'\n            }\n        };\n\n        /**\n         * Types of elements at canvas\n         */\n        this.elements = {\n            mainText: 'mainText',\n            image: 'picture',\n            headline: 'headline'\n        };\n\n        /**\n         * Space between elements\n         */\n        this.alignmentPadding = 17;\n\n        /**\n         * Space field around the text element\n         */\n        this.paddingOfElement = 10;\n\n        /**\n         * Padding between elements and th canvas\n         */\n        this.paddingOfCanvas = 30;\n\n        /**\n         * Colors of this module\n         */\n        this.colors = {\n            mainSVGcolor: '#FFFFFF',\n        };\n\n    }\n\n    /**\n     * Check if element is text\n     *\n     * @param {Element} - object\n     */\n    isText(element) {\n\n        if ([this.elements.headline, this.elements.mainText].indexOf(element.dataset.type) != -1 && element.children.length) {\n\n            return true;\n\n        } else {\n\n            return false;\n\n        }\n\n    }\n\n    /**\n     * Creates an SVG DOMElement\n     *\n     * @return {Element} - created SVG\n     */\n    create() {\n\n        this.tree.svg = $.make('div');\n        this.tree.svg.classList.add(this.CSS.canvas);\n        this.setCanvasFormat(this.formats.horisontal);\n\n        return this.tree.svg;\n\n    }\n\n    /**\n     * Changing the sizes of canvas by using format\n     *\n     * @param {String} format - type of format, can be 'horisontal', 'square' or 'vertical'\n     */\n    setCanvasFormat( format ) {\n\n        this.setSize(this.tree.svg, this.sizes[format]);\n\n    }\n\n    /**\n     * Changes the sizes of svg element\n     *\n     * @param {Element} element    - element to change size\n     * @param {Object|String} size - sizes of canvas, if string, then 'auto'\n     * @param {Number} size.width  - width of canvas\n     * @param {Number} size.height - height of canvas\n     */\n    setSize( element, size ) {\n\n        if (size.height) {\n\n            element.style.height = size.height + 'px';\n\n        }\n\n        if (size.width) {\n\n            element.style.width = size.width + 'px';\n\n        }\n\n    }\n\n    /**\n     * Changes the color of svg element\n     *\n     * @param {Element} element - element to change size\n     * @param {String} color    - color of text to set\n     */\n    setTextColor(element, color) {\n\n        element.style.color = color;\n\n    }\n\n    /**\n     * Changes the font size of svg element\n     *\n     * @param {Element} element    - element to change size\n     * @param {Number} size        - size of text to set\n     */\n    setTextFontSize( element, size ) {\n\n        element.style.fontSize = size;\n\n    }\n\n    /**\n     * Sets the alignment of the element at the canvas\n     *\n     * @param {Element} element   - element to change alignment\n     * @param {String} horisontal - type of alignment on horisontal\n     * @param {String} vertical   - type of alignment on verlical\n     */\n    setElementAlignment( element, horisontal) {\n\n        let align = {\n            horisontal: this.alignment.horisontal\n        };\n\n        for (let key in this.CSS.alignment) {\n\n            element.classList.remove(this.CSS.alignment[key]);\n\n        }\n\n        switch (horisontal) {\n\n            case align.horisontal.left:\n\n                element.classList.add(this.CSS.alignment.left);\n                break;\n\n            case align.horisontal.center:\n\n                element.classList.add(this.CSS.alignment.center);\n                break;\n\n            case align.horisontal.right:\n\n                element.classList.add(this.CSS.alignment.right);\n                break;\n\n        }\n\n        return;\n\n    }\n\n    /**\n     * Creates an text element\n     *\n     * @param {Object|String} coords   - where to place text on canvas\n     * @param {Number} coords.x        - x coord\n     * @param {Number} coords.y        - y coord\n     * @return {Element}               - created text\n     */\n    createText( type ) {\n\n        let text = $.make('div', [this.CSS.element, this.CSS.elements[type]]);\n\n        text.innerHTML = this.newText;\n        text.dataset.type = type;\n\n        text.setAttribute('contenteditable', true);\n        text.addEventListener('paste', this.pasteFromClipboard.bind(this));\n\n        this.tree.svg.appendChild(text);\n        this.setElementAlignment(text, this.alignment.horisontal.left);\n\n        return text;\n\n    }\n\n    /**\n     * Paste text form clipboard\n     *\n     * @param {ClipboardEvent} event - paste event\n     */\n    pasteFromClipboard(event) {\n\n        event.stopPropagation();\n        event.preventDefault();\n\n        let data = (event.clipboardData || window.clipboardData).getData('Text');\n\n        if (!data) {\n\n            return;\n\n        }\n\n        this.insertAtCaret(data);\n\n    }\n\n    /**\n     * Inserting text to caret position\n     *\n     * @param {String} text - text for inserting\n     */\n    insertAtCaret(text) {\n\n        document.execCommand('insertText', false, text);\n\n    }\n\n    /**\n     * Creates an image element\n     *\n     * @param {String} link - URL of image\n     */\n    createImage(link) {\n\n        let image = $.make('img', [this.CSS.element, this.CSS.elements.image], {src: 'src/assets/icon-picture.svg'});\n\n        this.setElementAlignment(image, this.alignment.horisontal.left);\n        this.tree.svg.appendChild(image);\n\n        return image;\n\n    }\n\n    /**\n     * Creates elements from parameter\n     *\n     * @param {String} - type of elements: 'mainText', 'headline', 'image'\n     */\n    createElement(element) {\n\n        if (element === this.elements.headline || element === this.elements.mainText) {\n\n            return this.createText(element);\n\n        } else if (element === this.elements.image) {\n\n            return this.createImage(element);\n\n        }\n\n    }\n\n    /**\n     * Export canvas as SVG file\n     */\n    export() {\n\n        let serializer = new window.XMLSerializer(),\n            source = serializer.serializeToString(this.tree.svg);\n\n        /**\n         * Match 'source' with regex: \"xmlns=\"http//www.w3.org/2000/svg\" between one and unlimited times and replace it\n         */\n        if (!source.match(/^<svg[^>]+xmlns=\"http\\:\\/\\/www\\.w3\\.org\\/2000\\/svg\"/)) {\n\n            source = source.replace(/^<svg/, '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n\n        }\n\n        /**\n         * Match 'source' with regex: \"xmlns=\"http//www.w3.org/1999/svg\" between one and unlimited times and replace it\n         */\n        if (!source.match(/^<svg[^>]+\"http\\:\\/\\/www\\.w3\\.org\\/1999\\/xlink\"/)) {\n\n            source = source.replace(/^<svg/, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\"');\n\n        }\n\n        source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + source;\n\n        let link = $.make('a', null, {\n            'style': 'display:none;',\n            'href': 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(source),\n            'download': 'cover.svg'\n        });\n\n        document.body.appendChild(link);\n\n        link.click();\n        document.body.removeChild(link);\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/canvas.js","/**\n * DOM utility\n */\nlet $ = require('./dom').default;\n\n/**\n *  Creates a toolbar\n *  @class Toolbar\n *\n *  @property {Object}  tree   — toolbar nodes\n *  @property {Object}  CSS    — styles dictionary\n *  @property {HTMLElement} editor — main editor wrapper\n *  @property {SVGElement} canvas — main canvas SVG\n *  @property {HTMLElement} target — on which element toolbar was open\n */\nexport default class Toolbar {\n\n    /**\n     * @constructor\n     * Toolbar module\n     *\n     * @param {Object} fontSizes        - font sizes for target elements\n     * @param {String} fontSizes.small  - the smalles text size\n     * @param {String} fontSizes.medium - the medium text size\n     * @param {String} fontSizes.big    - the biggest text size\n     */\n    constructor(fontSizes) {\n\n        /**\n         * Component for controlling canvas.\n         * @type {Object}\n         */\n        this.instances = {\n            canvas: null\n        };\n\n        /**\n         * On which element toolbar was opened\n         * @type {Element|null}\n         */\n        this.target = null;\n\n        /**\n         * Properties for target element at the SVG\n         * @type {Object}\n         */\n        this.properties = {\n            fontSize: {\n                small: fontSizes && fontSizes.small ? fontSizes.small : '25px',\n                medium: fontSizes && fontSizes.medium ? fontSizes.medium : '28px',\n                big: fontSizes && fontSizes.big ? fontSizes.big : '31px'\n            }\n        };\n\n        /**\n         * DOM Elements\n         * @type {Object}\n         */\n        this.tree = {\n            toolbar: undefined,\n            buttons: {\n                fontSize: undefined,\n                left: undefined,\n                center: undefined,\n                right: undefined,\n                color: undefined\n            },\n            colorForm: undefined,\n        };\n\n        /**\n         * CSS classnames\n         * @type {Object}\n         */\n        this.CSS = {\n            hidden: 'cover-editor--hidden',\n            toolbar: {\n                colorMode: 'cover-editor__toolbar--color-mode',\n                normal: 'cover-editor__toolbar'\n            },\n            target: {\n                active: 'cover-editor__text--active',\n                fontSize: [\n                    'cover-editor__text--small',\n                    'cover-editor__text--medium',\n                    'cover-editor__text--big'\n                ],\n            },\n            button : 'cover-editor__button',\n            buttons: {\n                active    : 'cover-editor__button--active',\n                left      : 'cover-editor__button--left',\n                center    : 'cover-editor__button--center',\n                right     : 'cover-editor__button--right',\n                fontSize  : 'cover-editor__button--font-size',\n                fontSizes : {\n                    small: 'cover-editor__button--small',\n                    medium: 'cover-editor__button--medium',\n                    big: 'cover-editor__button--big'\n                },\n                color : 'cover-editor__button--color'\n            },\n            colorForm : 'cover-editor__color-form'\n        };\n\n        /**\n         * Color constants\n         */\n        this.colors = {\n            defaultText : '#000000'\n        };\n\n        /**\n         * Margin between the canvas element and the toolbar\n         */\n        this.margin = 10;\n\n    }\n\n    /**\n     *  Prepares toolbar elements\n     *\n     * @param  {Element} editor         - main wrapper\n     * @param  {Object} canvas          - canvas instance\n     * @param  {Element} canvasInstance - canvas object\n     */\n    create(editor, canvas, canvasInstance) {\n\n        /**\n         * Main Editor wrapper\n         * @type {Element}\n         */\n        this.editor = editor;\n        this.canvas = canvas;\n        this.instances.canvas = canvasInstance;\n\n        this.make();\n\n    }\n\n\n    /**\n     * Creates toolbar\n     */\n    make() {\n\n        this.tree.toolbar = $.make('div', [this.CSS.toolbar.normal, this.CSS.hidden]);\n\n        /**\n         * Add buttons\n         */\n        for (var type in this.tree.buttons) {\n\n            let button = $.make('span', [this.CSS.button, this.CSS.buttons[type]]);\n\n            this.tree.toolbar.appendChild(button);\n            this.tree.buttons[type] = button;\n\n            /**\n             * Save action in the button's dataset\n             */\n            button.dataset.action = type;\n\n            button.addEventListener('click', event => {\n\n                this.buttonClicked(event);\n\n            });\n\n        }\n\n        /**\n         * Add color form\n         */\n        this.tree.colorForm = $.make('input', [ this.CSS.colorForm ]);\n        this.tree.colorForm.addEventListener('keyup', event => {\n\n            this.changeColorModeByKey(event);\n\n        });\n        this.tree.toolbar.insertBefore(this.tree.colorForm, this.tree.buttons.color);\n\n        /**\n         * Append toolbar to the Editor\n         */\n        this.editor.appendChild(this.tree.toolbar);\n\n    }\n\n    /**\n     * Toolbar button click handler\n     * @param  {MouseEvent} event  - click on the button\n     */\n    buttonClicked(event) {\n\n        let buttonClicked = event.target,\n            action = buttonClicked.dataset.action;\n\n        switch ( action ) {\n\n            case 'fontSize':\n                this.changeFontSize();\n                break;\n\n            case 'left':\n            case 'center':\n            case 'right':\n                this.changeAlignment(action);\n                break;\n\n            case 'color':\n                this.changeColorMode();\n                break;\n\n        }\n\n    }\n\n    /**\n     * Change font size of target\n     * @param {Integer} fontSize - number of font size\n     */\n    changeFontSize() {\n\n        let current = this.target.dataset.fontSize,\n            sizes = ['small', 'medium', 'big'],\n            next;\n\n        next = sizes[(sizes.indexOf(current) + 1) % sizes.length];\n\n        this.target.dataset.fontSize = next;\n        this.tree.buttons.fontSize.classList.remove(this.CSS.buttons.fontSizes[current]);\n        this.tree.buttons.fontSize.classList.add(this.CSS.buttons.fontSizes[next]);\n        this.instances.canvas.setTextFontSize(this.target, this.properties.fontSize[next]);\n        this.moveToTarget();\n\n    }\n\n    /**\n     * Open toolbar near element\n     * @param {String} alignment - alignment of target: 'left', 'center' or 'right'\n     */\n    changeAlignment( alignment ) {\n\n        this.target.dataset.alignment = alignment;\n\n        for (let type in this.tree.buttons) {\n\n            if (type !== 'fontSize' && type !== 'color') {\n\n                this.tree.buttons[type].classList.remove(this.CSS.buttons.active);\n\n            }\n\n        };\n\n        this.tree.buttons[alignment].classList.add(this.CSS.buttons.active);\n        this.instances.canvas.setElementAlignment(this.target, alignment, undefined);\n        this.moveToTarget();\n\n    }\n\n    /**\n     * Change color of target and toolbar color button\n     * @param {String} color - color of target\n     */\n    changeColor( color ) {\n\n        if (!color) {\n\n            return;\n\n        }\n\n        this.instances.canvas.setTextColor(this.target, color);\n        this.target.dataset.color = color;\n        this.tree.buttons.color.style.background = color;\n\n    }\n\n    /**\n     * Set color after enter button was clicked on the keyboard\n     */\n    changeColorModeByKey(event) {\n\n        if (event.keyCode != 13) {\n\n            return;\n\n        }\n\n        this.changeColorMode();\n\n    }\n\n    /**\n     * Toggle color mode of toolbar\n     */\n    changeColorMode() {\n\n        if (this.tree.toolbar.classList.contains(this.CSS.toolbar.colorMode)) {\n\n            this.changeColor(this.tree.colorForm.value);\n            this.tree.colorForm.value = '';\n            this.tree.toolbar.classList.remove(this.CSS.toolbar.colorMode);\n\n        } else {\n\n            this.tree.toolbar.classList.add(this.CSS.toolbar.colorMode);\n            this.tree.colorForm.focus();\n\n        }\n\n        this.moveToTarget();\n\n    }\n\n    /**\n     * Get coords of element\n     * @param {Element} element - DOM tree which coords will be got\n     */\n    getCoords(element) {\n\n        var parent = element.offsetParent,\n            coords =\n            {\n                top: 0,\n                left: 0\n            };\n\n        while (element && element.offsetTop !== undefined && element.offsetLeft !== undefined) {\n\n            coords.top += element.offsetTop;\n            coords.left += element.offsetLeft;\n            element = element.offsetParent;\n\n        }\n\n        return coords;\n\n    }\n\n    /**\n     * Move toolbar to target\n     */\n    moveToTarget() {\n\n        let toolbar = this.tree.toolbar,\n            element = this.getCoords(this.target),\n            canvasWrapper = this.getCoords(this.canvas.parentNode.parentNode);\n\n        element.width = this.target.clientWidth;\n\n        switch (this.target.dataset.alignment) {\n\n            case 'left':\n                toolbar.style.left = element.left - canvasWrapper.left + 'px';\n                break;\n\n            case 'center':\n                toolbar.style.left = element.left - canvasWrapper.left - toolbar.clientWidth / 2 + 'px';\n                break;\n\n            case 'right':\n                toolbar.style.left = element.left - canvasWrapper.left + element.width - toolbar.clientWidth + 'px';\n                break;\n\n        }\n\n        toolbar.style.top = element.top - canvasWrapper.top - this.margin - toolbar.clientHeight + 'px';\n\n    }\n\n    /**\n     * Read states of buttons from target\n     */\n    getTargetParams() {\n\n        if (this.target.dataset.fontSize == undefined) {\n\n            this.target.dataset.fontSize = 'big';\n            this.changeFontSize();\n\n        } else {\n\n            this.tree.buttons.fontSize.classList.add(this.CSS.buttons.fontSizes[this.target.dataset.fontSize]);\n\n        }\n\n        if (this.target.dataset.alignment == undefined) {\n\n            this.target.dataset.alignment = 'left';\n\n        }\n        this.changeAlignment(this.target.dataset.alignment);\n\n        if (this.target.dataset.color == undefined) {\n\n            this.target.dataset.color = this.colors.defaultText;\n\n        }\n        this.changeColor(this.target.dataset.color);\n\n    }\n\n    /**\n     * Open toolbar near element\n     *\n     * @param {Element} target - element to which toolbar will be bound\n     */\n    openNear(target) {\n\n        this.removeTargetParams();\n        this.target = target;\n        this.tree.toolbar.classList.remove(this.CSS.hidden);\n        this.moveToTarget();\n        this.getTargetParams();\n\n    }\n\n    /**\n     * Clears buttons states in toolbar\n     */\n    removeTargetParams() {\n\n        this.tree.toolbar.classList.remove(this.CSS.toolbar.colorMode);\n\n        this.tree.buttons.left.classList.remove(this.CSS.buttons.active);\n        this.tree.buttons.center.classList.remove(this.CSS.buttons.active);\n        this.tree.buttons.right.classList.remove(this.CSS.buttons.active);\n\n        for (let key in this.CSS.buttons.fontSizes) {\n\n            this.tree.buttons.fontSize.classList.remove(this.CSS.buttons.fontSizes[key]);\n\n        }\n\n    }\n\n    /**\n     * Hide toolbar\n     */\n    hide() {\n\n        this.target = null;\n        this.tree.toolbar.classList.add(this.CSS.hidden);\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/toolbar.js"],"sourceRoot":""}